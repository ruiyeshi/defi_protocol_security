import requests
import pandas as pd
from datetime import datetime

print("üåç Fetching DeFi exploit data from DefiLlama & fallback mirrors...")

# --- Primary and fallback mirrors ---
MIRRORS = [
    "https://api.llama.fi/hacks",  # New DefiLlama endpoint
    "https://raw.githubusercontent.com/cryptohackathons/defi-exploits-archive/main/hacks.json",  # mirror 1
    "https://raw.githubusercontent.com/chain-security-labs/defi_exploits_dataset/main/defi_exploits.json"  # mirror 2
]

data = None
for url in MIRRORS:
    try:
        print(f"üîó Trying {url} ...")
        resp = requests.get(url, timeout=20)
        resp.raise_for_status()
        data = resp.json()
        print(f"‚úÖ Success: Retrieved {len(data)} records from {url}")
        break
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to fetch from {url}: {e}")

if not data:
    print("‚ùå All sources failed. No exploit data retrieved.")
    exit()

# --- Normalize JSON structure ---
records = []
for item in data:
    records.append({
        "protocol_name": item.get("project") or item.get("name") or "",
        "category": item.get("category") or item.get("type") or "",
        "chain": item.get("chain") or item.get("network") or "",
        "date": item.get("date") or item.get("timestamp") or "",
        "loss_usd": item.get("amount") or item.get("lossUSD") or "",
        "cause": item.get("description") or item.get("cause") or "",
        "exploit_url": item.get("link") or item.get("source") or ""
    })

df = pd.DataFrame(records)

if df.empty:
    print("‚ö†Ô∏è JSON parsed but no usable records found.")
else:
    print(f"üì¶ Parsed {len(df)} exploit records.")

# --- Cleaning and formatting ---
if "date" in df.columns:
    df["date"] = pd.to_datetime(df["date"], errors="coerce")
if "loss_usd" in df.columns:
    df["loss_usd"] = pd.to_numeric(df["loss_usd"], errors="coerce")

df = df.drop_duplicates(subset=["protocol_name", "date"], keep="last")
df = df.sort_values(by="date", ascending=False)

# --- Save ---
output_path = "data_raw/contracts/exploit_metadata_final.csv"
df.to_csv(output_path, index=False)
print(f"‚úÖ Saved {len(df)} cleaned exploit incidents ‚Üí {output_path}")
print("\nüìä Sample preview:")
print(df.head(10))