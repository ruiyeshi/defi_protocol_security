import requests
import pandas as pd
from datetime import datetime
from pathlib import Path

base = Path("data_raw/contracts")
out_path = base / "exploit_metadata_final.csv"

records = []

# 1Ô∏è‚É£ DeFiYield fallback (API still open)
try:
    print("üì° Fetching exploits from DeFiYield REKT Database...")
    url = "https://api.defiyield.app/rekts"  # public JSON list
    r = requests.get(url, timeout=15)
    r.raise_for_status()
    data = r.json().get("rekts", [])
    for d in data:
        records.append({
            "protocol_name": d.get("project", "").strip(),
            "exploit_date": d.get("date", ""),
            "loss_usd": d.get("amountLost", 0),
            "attack_vector": d.get("type", ""),
            "source": "defiyield_api"
        })
    print(f"‚úÖ Added {len(data)} exploits from DeFiYield.")
except Exception as e:
    print("‚ö†Ô∏è DeFiYield fetch failed:", e)

# 2Ô∏è‚É£ Chainalysis fallback (archived report snapshots)
try:
    print("üì° Adding Chainalysis highlights manually...")
    chainalysis_manual = [
        {"protocol_name": "Euler", "exploit_date": "2023-03-13", "loss_usd": 197_000_000,
         "attack_vector": "flash loan / liquidation logic", "source": "chainalysis"},
        {"protocol_name": "Ronin", "exploit_date": "2022-03-23", "loss_usd": 624_000_000,
         "attack_vector": "bridge validator key compromise", "source": "chainalysis"},
        {"protocol_name": "Nomad", "exploit_date": "2022-08-01", "loss_usd": 190_000_000,
         "attack_vector": "bridge misconfiguration", "source": "chainalysis"},
        {"protocol_name": "Beanstalk", "exploit_date": "2022-04-17", "loss_usd": 182_000_000,
         "attack_vector": "governance exploit", "source": "chainalysis"},
        {"protocol_name": "BadgerDAO", "exploit_date": "2021-12-02", "loss_usd": 120_000_000,
         "attack_vector": "front-end compromise", "source": "chainalysis"},
        {"protocol_name": "Curve", "exploit_date": "2023-07-30", "loss_usd": 61_000_000,
         "attack_vector": "reentrancy / Vyper compiler bug", "source": "chainalysis"},
    ]
    records.extend(chainalysis_manual)
    print("‚úÖ Added 6 manual Chainalysis records.")
except Exception as e:
    print("‚ö†Ô∏è Chainalysis manual append failed:", e)

# 3Ô∏è‚É£ Clean + Save
if records:
    df = pd.DataFrame(records)
    df["exploit_date"] = pd.to_datetime(df["exploit_date"], errors="coerce")
    df = df.sort_values("exploit_date", ascending=False)
    df.drop_duplicates(subset=["protocol_name"], keep="first", inplace=True)
    df.to_csv(out_path, index=False)
    print(f"‚úÖ Saved enriched exploit metadata ‚Üí {out_path} ({len(df)} rows)")
else:
    print("‚ö†Ô∏è No records parsed ‚Äì check network access or API availability.")