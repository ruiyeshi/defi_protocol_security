#!/usr/bin/env python3
# /Users/ruiyeshi/defi_protocol_security/fetch_exploit_datasets.py
# -*- coding: utf-8 -*-

import requests, pandas as pd, re
from pathlib import Path

ROOT=Path(__file__).resolve().parent
OUT=ROOT/"data_raw/incidents"; OUT.mkdir(parents=True, exist_ok=True)
CAT=OUT/"exploit_catalog.csv"

def normalize_chain(raw):
    if not isinstance(raw,str): return "unknown"
    m={"Ethereum":"eth","ETH":"eth","BSC":"bsc","Binance":"bsc","Polygon":"polygon",
       "Arbitrum":"arb","Optimism":"op","Avalanche":"avax","Fantom":"ftm"}
    for k,v in m.items():
        if k.lower() in raw.lower(): return v
    return raw.strip().lower() or "unknown"

def fetch_slowmist():
    url="https://hacked.slowmist.io/en/"
    try:
        tables=pd.read_html(url)
    except Exception:
        return pd.DataFrame()
    if not tables: return pd.DataFrame()
    df=tables[0]
    df.columns=["date","project","type","amount","currency","chain","remarks"]
    df["protocol"]=df["project"].astype(str).str.strip()
    df["exploit_date"]=pd.to_datetime(df["date"], errors="coerce")
    df["loss_usd"]=pd.to_numeric(df["amount"].astype(str).str.replace(r"[^0-9.]", "", regex=True), errors="coerce")
    df["exploit_type"]=df["type"].astype(str).str.lower()
    df["chain"]=df["chain"].map(normalize_chain)
    df["source"]="slowmist"; df["url"]=url
    return df[["protocol","chain","exploit_date","loss_usd","exploit_type","source","url"]]

def fetch_web3rekt():
    url="https://api.web3rekt.com/api/incidents"
    try:
        d=requests.get(url,timeout=30).json().get("data",[])
    except Exception:
        return pd.DataFrame()
    rows=[]
    for x in d:
        rows.append({
            "protocol": str(x.get("project","")).strip(),
            "chain": normalize_chain(str(x.get("chain","unknown"))),
            "exploit_date": x.get("date") or x.get("timestamp"),
            "loss_usd": x.get("loss_usd") or x.get("amount"),
            "exploit_type": str(x.get("attack_type","")).lower(),
            "source":"web3rekt","url":x.get("url") or x.get("link","")
        })
    return pd.DataFrame(rows)

def fetch_rektnews():
    url="https://api.rekt.news/posts.json"
    try:
        data=requests.get(url,timeout=30).json()
    except Exception:
        return pd.DataFrame()
    rows=[]
    for d in data:
        if not d.get("tags"): continue
        loss=None
        m=re.findall(r"\$([0-9.,]+)", d.get("content",""))
        if m: loss=m[0].replace(",","")
        rows.append({
            "protocol": d.get("title","").split(":")[0].strip(),
            "chain": "eth" if "ethereum" in str(d).lower() else "unknown",
            "exploit_date": d.get("published_at"),
            "loss_usd": loss,
            "exploit_type": ", ".join(d.get("tags",[])),
            "source":"rekt","url": f"https://rekt.news/{d.get('slug')}/"
        })
    return pd.DataFrame(rows)

def main():
    frames=[fetch_slowmist(), fetch_web3rekt(), fetch_rektnews()]
    frames=[f for f in frames if not f.empty]
    if not frames:
        print("⚠️ No incident sources available right now.")
        return
    df=pd.concat(frames, ignore_index=True)
    df["loss_usd"]=pd.to_numeric(df["loss_usd"], errors="coerce")
    df["exploit_date"]=pd.to_datetime(df["exploit_date"], errors="coerce")
    df.to_csv(CAT, index=False)
    print(f"✅ Saved {len(df)} incidents → {CAT}")

if __name__=="__main__":
    main()